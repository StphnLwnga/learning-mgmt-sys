// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]     // Enable full text search and index course title to enable search in MySQL
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


model Course {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  description String?      @db.Text
  imageUrl    String?      @db.Text
  price       Float?       @default(0.00)
  isPublished Boolean      @default(false)

  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id])

  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique

  courses   Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text

  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([courseId])
}

model Chapter {
  id           String         @id @default(uuid())
  title        String
  description  String?        @db.Text
  videoUrl     String?        @db.Text
  position     Int
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)

  courseId     String
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  muxData      MuxData?
  userProgress UserProgress[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt()

  @@index([courseId])
}

model MuxData {
  id         String   @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId  String   @unique
  chapter    Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@index([chapterId])
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  isCompleted Boolean  @default(false)

  chapterId   String   @unique
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id          String   @id @default(uuid())
  userId      String

  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@index([courseId])
  @@unique([userId, courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt()
}

// MISC: Note relations: One-to-Many relations: Category-->Course[], Course-->Attachment[], Course-->Chapter[], Chapter-->UserProgress[]
